Subject: [PATCH] review
---
Index: src/main/resources/schema.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/schema.sql b/src/main/resources/schema.sql
--- a/src/main/resources/schema.sql	(revision f92555b1275d2366af563f5aa6f6cefa916db70c)
+++ b/src/main/resources/schema.sql	(date 1701258529714)
@@ -23,6 +23,8 @@
 );
 
 														-- REVIEW
+-- нужно единообразие в названиях таблиц. Сейчас в users и cars используется множественное число,
+-- а в review, booking и дальше - единственное
 create table if not exists review (
 id int generated by default as identity not null primary key,
 car_id int not null references cars(id) on delete cascade,
Index: src/main/resources/schemaForTest.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/schemaForTest.sql b/src/main/resources/schemaForTest.sql
--- a/src/main/resources/schemaForTest.sql	(revision f92555b1275d2366af563f5aa6f6cefa916db70c)
+++ b/src/main/resources/schemaForTest.sql	(date 1701258529730)
@@ -1,3 +1,4 @@
+-- эту схему нужно положить в resources из тестов и назвать schema.sql
 drop table if exists users cascade;
 drop table if exists cars cascade;
 drop table if exists review cascade;
Index: src/main/java/myPrivateShareCar/repository/CarRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/myPrivateShareCar/repository/CarRepository.java b/src/main/java/myPrivateShareCar/repository/CarRepository.java
--- a/src/main/java/myPrivateShareCar/repository/CarRepository.java	(revision f92555b1275d2366af563f5aa6f6cefa916db70c)
+++ b/src/main/java/myPrivateShareCar/repository/CarRepository.java	(date 1701258529771)
@@ -11,6 +11,7 @@
 public interface CarRepository extends JpaRepository<Car, Integer>, JpaSpecificationExecutor<Car> {
     List<Car> findByOwnerId(int ownerId, Pageable pageable);
 
+    // REVIEW: этот метод нигде, кроме тестов, не используется. Точно нужен?
     @Query("select c from Car c where" +
             " lower(c.brand) like lower(concat('%', :text, '%'))" +
             " or lower(c.model) like lower(concat('%', :text, '%'))" +
Index: src/main/java/myPrivateShareCar/service/CarServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/myPrivateShareCar/service/CarServiceImpl.java b/src/main/java/myPrivateShareCar/service/CarServiceImpl.java
--- a/src/main/java/myPrivateShareCar/service/CarServiceImpl.java	(revision f92555b1275d2366af563f5aa6f6cefa916db70c)
+++ b/src/main/java/myPrivateShareCar/service/CarServiceImpl.java	(date 1701262015653)
@@ -86,6 +86,7 @@
                 .collect(Collectors.toList());
     }
 
+    // REVIEW: я бы все методы со спецификацией вынесла бы в отдельный класс
     private Specification<Car> findText(String text) {
         return (root, query, criteriaBuilder) -> criteriaBuilder.or(
                 criteriaBuilder.like(criteriaBuilder.lower(root.get("brand")), "%" + text.toLowerCase() + "%"),
@@ -130,6 +131,7 @@
 
 
     @Override
+    // REVIEW: пустая строка лишняя
 
     public void updatePrice(int carId, int ownerId, int pricePerDay) {
         Car car = carRepository.findById(carId)
Index: src/main/java/myPrivateShareCar/service/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/myPrivateShareCar/service/UserServiceImpl.java b/src/main/java/myPrivateShareCar/service/UserServiceImpl.java
--- a/src/main/java/myPrivateShareCar/service/UserServiceImpl.java	(revision f92555b1275d2366af563f5aa6f6cefa916db70c)
+++ b/src/main/java/myPrivateShareCar/service/UserServiceImpl.java	(date 1701258529786)
@@ -34,6 +34,7 @@
 
     @Override
     public User update(int id, JsonPatch jsonPatch) {
+        // REVIEW: не понимаю, зачем нужен маппинг в UpdateUserDto. Можно же оставить User?
         UpdateUserDto updateUserDto = mapper.map(userRepository.findById(id).orElseThrow(() ->
                 new NotFoundException("Невозможно обновить" + " пользователя. Пользователь с id " + id + " не найден")),
                 UpdateUserDto.class);
Index: src/main/java/myPrivateShareCar/repository/BookingRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/myPrivateShareCar/repository/BookingRepository.java b/src/main/java/myPrivateShareCar/repository/BookingRepository.java
--- a/src/main/java/myPrivateShareCar/repository/BookingRepository.java	(revision f92555b1275d2366af563f5aa6f6cefa916db70c)
+++ b/src/main/java/myPrivateShareCar/repository/BookingRepository.java	(date 1701258529804)
@@ -14,14 +14,18 @@
 
     List<Booking> findAllByUser_IdAndBookingStatusOrderByStartRentAsc(int userId, BookingStatus bookingStatus);
 
+    // REVIEW: findAllByCar_OwnerIdOrderByStartRentAsc не подойдет? вместо Query
     @Query("select b from Booking b left join Car c on b.car.id = c.id" +
             " where c.ownerId = ?1 order by b.startRent asc")
     List<Booking> findByOwnerId(int userId);
 
+    // REVIEW: аналогично предыдущему. Кажется, можно запросный метод сделать
     @Query("select b from Booking b left join Car c on b.car.id = c.id" +
             " where c.ownerId = ?1 and b.bookingStatus = ?2 order by b.startRent asc")
     List<Booking> findByOwnerIdAndStatus(int userId, BookingStatus bookingStatus);
 
+    // REVIEW: я бы статусы передала в метод (на случай, если в коде переименуется, а тут можно забыть). И тогда
+    // можно сделать запросный метод
     @Query("select b from Booking b" +
             " where b.user.id = ?1 and b.car.id = ?2 and (b.bookingStatus = 'APPROVED' or b.bookingStatus = 'FINISHED')")
     List<Booking> findByUserIdAndCarIdAndApprovedAndFinishedStatus(int userId, int carId);
Index: src/main/java/myPrivateShareCar/service/BookingServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/myPrivateShareCar/service/BookingServiceImpl.java b/src/main/java/myPrivateShareCar/service/BookingServiceImpl.java
--- a/src/main/java/myPrivateShareCar/service/BookingServiceImpl.java	(revision f92555b1275d2366af563f5aa6f6cefa916db70c)
+++ b/src/main/java/myPrivateShareCar/service/BookingServiceImpl.java	(date 1701258529755)
@@ -47,6 +47,8 @@
     }
 
     @Override
+    // REVIEW: а тут же может быть передан любой статус, не только APPROVE? В сообщениях к исключениям речь только
+    // про подтверждение. Я бы "подтвердить" заменила на "изменить статус"
     public BookingDto updateStatus(int ownerId, int bookingId, BookingStatus status) {
         Booking booking = bookingRepository.findById(bookingId)
                 .orElseThrow(() -> new NotFoundException("Невозможно подтвердить бронирование. " +
@@ -97,6 +99,7 @@
     public List<BookingDto> getOwnerBookings(int ownerId, BookingStatus status) {
         List<Booking> bookings;
         if (userRepository.existsById(ownerId)) {
+            // REVIEW: 0 и 5 здесь смотрятся странно. Возможно, тебе подойдет Pageable.unpaged()
             if (!carRepository.findByOwnerId(ownerId, PageRequest.of(0, 5)).isEmpty()) {
                 if (status == null) {
                     bookings = bookingRepository.findByOwnerId(ownerId);
Index: src/main/java/myPrivateShareCar/MyPrivateShareCarApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/myPrivateShareCar/MyPrivateShareCarApplication.java b/src/main/java/myPrivateShareCar/MyPrivateShareCarApplication.java
--- a/src/main/java/myPrivateShareCar/MyPrivateShareCarApplication.java	(revision f92555b1275d2366af563f5aa6f6cefa916db70c)
+++ b/src/main/java/myPrivateShareCar/MyPrivateShareCarApplication.java	(date 1701258529764)
@@ -3,6 +3,8 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+// REVIEW: по всему проекту закомментированный код нужно удалить. Например, в классе Booking или в ErrorHandler.
+// И в pom.xml
 @SpringBootApplication
 public class MyPrivateShareCarApplication {
 
Index: src/main/java/myPrivateShareCar/dto/UpdateUserDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/myPrivateShareCar/dto/UpdateUserDto.java b/src/main/java/myPrivateShareCar/dto/UpdateUserDto.java
--- a/src/main/java/myPrivateShareCar/dto/UpdateUserDto.java	(revision f92555b1275d2366af563f5aa6f6cefa916db70c)
+++ b/src/main/java/myPrivateShareCar/dto/UpdateUserDto.java	(date 1701258529745)
@@ -5,6 +5,7 @@
 import java.time.LocalDate;
 
 @Data
+// REVIEW: не понимаю, зачем этот класс нужен. В сервисе напишу подробнее
 public class UpdateUserDto {
     private int id;
     private String firstname;
Index: src/main/java/myPrivateShareCar/exception/UpdateException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/myPrivateShareCar/exception/UpdateException.java b/src/main/java/myPrivateShareCar/exception/UpdateException.java
--- a/src/main/java/myPrivateShareCar/exception/UpdateException.java	(revision f92555b1275d2366af563f5aa6f6cefa916db70c)
+++ b/src/main/java/myPrivateShareCar/exception/UpdateException.java	(date 1701258529737)
@@ -1,5 +1,6 @@
 package myPrivateShareCar.exception;
 
+// REVIEW: я бы единообразно с исключением на создание назвала. Либо NotUpdatedException здесь, либо CreateException там
 public class UpdateException extends RuntimeException {
     public UpdateException(String message) {
         super(message);
Index: src/main/java/myPrivateShareCar/controller/CarController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/myPrivateShareCar/controller/CarController.java b/src/main/java/myPrivateShareCar/controller/CarController.java
--- a/src/main/java/myPrivateShareCar/controller/CarController.java	(revision f92555b1275d2366af563f5aa6f6cefa916db70c)
+++ b/src/main/java/myPrivateShareCar/controller/CarController.java	(date 1701258529694)
@@ -18,6 +18,7 @@
 @RequiredArgsConstructor
 @RequestMapping("/cars")
 public class CarController {
+    // REVIEW: в некоторых контроллерах есть аннотация @Autowired над сервисом, а в некоторых нет. Нужно единообразие
     @Autowired
     private final CarService carService;
 
Index: src/main/java/myPrivateShareCar/exception/NotCreateException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/myPrivateShareCar/exception/NotCreateException.java b/src/main/java/myPrivateShareCar/exception/NotCreateException.java
--- a/src/main/java/myPrivateShareCar/exception/NotCreateException.java	(revision f92555b1275d2366af563f5aa6f6cefa916db70c)
+++ b/src/main/java/myPrivateShareCar/exception/NotCreateException.java	(date 1701258529778)
@@ -1,5 +1,6 @@
 package myPrivateShareCar.exception;
 
+// REVIEW: добавь d после Create
 public class NotCreateException extends RuntimeException {
     public NotCreateException(String message) {
         super(message);
Index: src/main/java/myPrivateShareCar/model/DriverLicense.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/myPrivateShareCar/model/DriverLicense.java b/src/main/java/myPrivateShareCar/model/DriverLicense.java
--- a/src/main/java/myPrivateShareCar/model/DriverLicense.java	(revision f92555b1275d2366af563f5aa6f6cefa916db70c)
+++ b/src/main/java/myPrivateShareCar/model/DriverLicense.java	(date 1701258529701)
@@ -27,6 +27,7 @@
     @JsonIgnore
     private User user;
 
+    // REVIEW: а эти паттерны в какой момент проверяются? При сохранении в базу данных?
     @Pattern(regexp = "^[0-9]{4}$",
             message = "Некорректный формат серии водительского удостоверения. Серия должна содержать 4 цифры")
     @Column(name = "driver_license_series")
Index: src/test/java/myPrivateShareCar/service/CarServiceImplIntegrationTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/myPrivateShareCar/service/CarServiceImplIntegrationTest.java b/src/test/java/myPrivateShareCar/service/CarServiceImplIntegrationTest.java
--- a/src/test/java/myPrivateShareCar/service/CarServiceImplIntegrationTest.java	(revision f92555b1275d2366af563f5aa6f6cefa916db70c)
+++ b/src/test/java/myPrivateShareCar/service/CarServiceImplIntegrationTest.java	(date 1701258529796)
@@ -35,6 +35,9 @@
 
     @BeforeEach
     public void setUp() {
+        // REVIEW: в интеграционных тестах не нужно создавать классы сервисом самостоятельно. Их должен через Autowired
+        // подставить спринг. И моки как правило тоже не используются, они нужны для юнит тестов. А здесь наша задача
+        // протестировать всё вместе с базой данных.
         carService = new CarServiceImpl(carRepository, userRepository, bookingRepository, new ModelMapper());
     }
 
Index: src/main/java/myPrivateShareCar/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/myPrivateShareCar/model/User.java b/src/main/java/myPrivateShareCar/model/User.java
--- a/src/main/java/myPrivateShareCar/model/User.java	(revision f92555b1275d2366af563f5aa6f6cefa916db70c)
+++ b/src/main/java/myPrivateShareCar/model/User.java	(date 1701258529723)
@@ -14,6 +14,7 @@
     @Column(unique = true, nullable = false)
     private int id;
 
+    // REVIEW: стиль лучше соблюдать и между всеми полями оставлять пустую строчку
     private String firstname;
     private String lastname;
     private String email;
@@ -32,6 +33,7 @@
 
 
 
+    // REVIEW: эти два метода сейчас не используются, они точно нужны?
     public void setPassport(Passport passport) {
         if (passport != null) {
             this.passport = passport;
